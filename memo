import * as THREE from "three";
import { OrbitControls } from "three/examples/jsm/controls/OrbitControls.js";
import { DragControls } from "three/examples/jsm/controls/DragControls.js";

let scene, camera, renderer, orbitControls, dragControls;
let objects = [];
let selected = null;

// シーン作成
scene = new THREE.Scene();

// カメラ作成
camera = new THREE.PerspectiveCamera(
  50,
  window.innerWidth / window.innerHeight,
  0.1,
  1000
);
camera.position.set(10, 10, 200);

// レンダラー作成
renderer = new THREE.WebGLRenderer({ alpha: true });
renderer.setSize(window.innerWidth, window.innerHeight);
document.body.appendChild(renderer.domElement);

// 地球儀テクスチャとメッシュ作成
const texture = new THREE.TextureLoader().load("./textures/earth.jpg");
const geometry = new THREE.SphereGeometry(10, 64, 32);
const material = new THREE.MeshPhysicalMaterial({ map: texture });

const ballMesh = new THREE.Mesh(geometry, material);
ballMesh.position.set(0, 0.5, 0); // Y = 0.5 固定
scene.add(ballMesh);
objects.push(ballMesh);

// ライト
const directionalLight = new THREE.DirectionalLight(0xffffff, 2);
scene.add(directionalLight);

// 軸とグリッドヘルパー
const axesHelper = new THREE.AxesHelper(100);
scene.add(axesHelper);

const gridHelper = new THREE.GridHelper(1000, 20);
scene.add(gridHelper);

// OrbitControls（カメラ操作）
orbitControls = new OrbitControls(camera, renderer.domElement);
orbitControls.enableDamping = true;

// DragControls（オブジェクト操作）
dragControls = new DragControls(objects, camera, renderer.domElement);

// Raycaster 用意
const plane = new THREE.Plane(new THREE.Vector3(0, 1, 0), 0); // XZ 平面（Y=0）
const raycaster = new THREE.Raycaster();
const mouse = new THREE.Vector2();

// マウス位置を取得
window.addEventListener("mousemove", (event) => {
  mouse.x = (event.clientX / window.innerWidth) * 2 - 1;
  mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;
});

// ドラッグ開始 → カメラ操作無効化
dragControls.addEventListener("dragstart", (event) => {
  selected = event.object;
  orbitControls.enabled = false;
});

// ドラッグ中 → 平面と交差する位置にスナップ
dragControls.addEventListener("drag", () => {
  raycaster.setFromCamera(mouse, camera);
  const intersectPoint = new THREE.Vector3();
  const hit = raycaster.ray.intersectPlane(plane, intersectPoint);

  if (hit && selected) {
    selected.position.x = intersectPoint.x;
    selected.position.z = intersectPoint.z;
    selected.position.y = 0.5; // Yは固定

    console.log(
      `🌍 地球儀位置: x=${selected.position.x.toFixed(2)}, z=${selected.position.z.toFixed(2)}`
    );
  }
});

// ドラッグ終了 → カメラ操作再開
dragControls.addEventListener("dragend", () => {
  selected = null;
  orbitControls.enabled = true;
});

// レンダリングループ
function animate() {
  requestAnimationFrame(animate);
  orbitControls.update();
  renderer.render(scene, camera);
}
animate();





import React, { useRef, useEffect } from 'react';
import * as THREE from 'three';
import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';
import { DragControls }  from 'three/examples/jsm/controls/DragControls.js';
import { Sky }           from 'three/examples/jsm/objects/Sky.js';

const App: React.FC = () => {
  const mountRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    if (!mountRef.current) return;

    // === Scene Setup ===
    const scene = new THREE.Scene();

    // === Camera ===
    const camera = new THREE.PerspectiveCamera(
      50,
      window.innerWidth / window.innerHeight,
      0.1,
      1000
    );
    camera.position.set(0, 20, 60);

    // === Renderer ===
    const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });
    renderer.setSize(window.innerWidth, window.innerHeight);
    mountRef.current.appendChild(renderer.domElement);
    const canvas = renderer.domElement as HTMLCanvasElement;

    // === Meshes ===
    const objects: THREE.Object3D[] = [];
    const earthTex = new THREE.TextureLoader().load('/textures/earth.jpg');
    const earth = new THREE.Mesh(
      new THREE.SphereGeometry(10, 64, 32),
      new THREE.MeshStandardMaterial({ map: earthTex })
    );
    earth.position.set(0, 10, 0);
    scene.add(earth);
    objects.push(earth);

    const box = new THREE.Mesh(
      new THREE.BoxGeometry(20, 20, 20),
      new THREE.MeshStandardMaterial({ color: 0xffaa00 })
    );
    box.position.set(30, 10, 0);
    scene.add(box);
    objects.push(box);

    const cone = new THREE.Mesh(
      new THREE.ConeGeometry(5, 20, 32),
      new THREE.MeshStandardMaterial({ color: 0x228833 })
    );
    cone.position.set(-30, 10, 0);
    scene.add(cone);
    objects.push(cone);

    const ground = new THREE.Mesh(
      new THREE.PlaneGeometry(1000, 1000),
      new THREE.MeshStandardMaterial({ color: 0x999999 })
    );
    ground.rotation.x = -Math.PI / 2;
    scene.add(ground);

    const sky = new Sky();
    sky.scale.setScalar(450000);
    scene.add(sky);
    const uniforms = sky.material.uniforms;
    uniforms['turbidity'].value = 14;
    uniforms['rayleigh'].value = 0.5;
    const sun = new THREE.Vector3();
    sun.setFromSphericalCoords(
      1,
      THREE.MathUtils.degToRad(9),
      THREE.MathUtils.degToRad(0)
    );
    uniforms['sunPosition'].value.copy(sun);

    // === Lights & Helpers ===
    scene.add(new THREE.DirectionalLight(0xffffff, 1));
    scene.add(new THREE.AmbientLight(0xffffff, 0.4));
    scene.add(new THREE.AxesHelper(50));
    scene.add(new THREE.GridHelper(200, 20));

    // === Controls ===
    const orbitControls = new OrbitControls(camera, canvas);
    orbitControls.enableDamping = true;
    orbitControls.minPolarAngle = 0;
    orbitControls.maxPolarAngle = Math.PI * 0.48;

    const dragControls = new DragControls([], camera, canvas);

    // === Raycaster & Mouse ===
    const raycaster = new THREE.Raycaster();
    const mouse = new THREE.Vector2();
    let selected: THREE.Object3D | null = null;

    const onMouseMove = (e: MouseEvent) => {
      mouse.x = (e.clientX / window.innerWidth) * 2 - 1;
      mouse.y = -(e.clientY / window.innerHeight) * 2 + 1;
    };
    window.addEventListener('mousemove', onMouseMove);

    // === Radial Menu Functions ===
    function showRadialMenu(position3D: THREE.Vector3) {
      const el = document.getElementById('radial-buttons');
      if (!el) return;
      const buttons = Array.from(el.children) as HTMLElement[];
      const proj = position3D.clone().project(camera);
      const cx = ((proj.x + 1) / 2) * window.innerWidth;
      const cy = ((-proj.y + 1) / 2) * window.innerHeight;
      const R = 60;
      buttons.forEach((btn, i) => {
        const angle = (i / buttons.length) * Math.PI * 2;
        btn.style.left = `${cx + Math.cos(angle) * R}px`;
        btn.style.top  = `${cy + Math.sin(angle) * R}px`;
        btn.style.display = 'block';
      });
    }
    function hideRadialMenu() {
      const el = document.getElementById('radial-buttons');
      if (!el) return;
      Array.from(el.children).forEach(btn => (btn as HTMLElement).style.display = 'none');
    }

    // 初期表示で隠す
    hideRadialMenu();

    // === Click Handler ===
    const onClick = (e: MouseEvent) => {
      const rect = canvas.getBoundingClientRect();
      const ndcX = ((e.clientX - rect.left) / rect.width) * 2 - 1;
      const ndcY = -((e.clientY - rect.top) / rect.height) * 2 + 1;
      raycaster.setFromCamera({ x: ndcX, y: ndcY }, camera);
      const hits = raycaster.intersectObjects(objects);
      if (hits.length > 0) {
        selected = hits[0].object;
        dragControls.objects = [selected];
        showRadialMenu(hits[0].point);
      } else {
        selected = null;
        dragControls.objects = [];
        hideRadialMenu();
      }
    };
    canvas.addEventListener('pointerdown', onClick);

    // === Drag Controls ===
    dragControls.addEventListener('dragstart', () => orbitControls.enabled = false);
    dragControls.addEventListener('drag', () => {
      const point = new THREE.Vector3();
      if (raycaster.ray.intersectPlane(new THREE.Plane(new THREE.Vector3(0,1,0),0), point) && selected) {
        selected.position.set(point.x, 10, point.z);
      }
    });
    dragControls.addEventListener('dragend', () => { orbitControls.enabled = true; selected = null; });

    // === Window Resize ===
    const onResize = () => {
      camera.aspect = window.innerWidth / window.innerHeight;
      camera.updateProjectionMatrix();
      renderer.setSize(window.innerWidth, window.innerHeight);
    };
    window.addEventListener('resize', onResize);

    // === Animate Loop ===
    const animate = () => {
      requestAnimationFrame(animate);
      orbitControls.update();
      renderer.render(scene, camera);
    };
    animate();

    // === Cleanup ===
    return () => {
      window.removeEventListener('mousemove', onMouseMove);
      canvas.removeEventListener('pointerdown', onClick);
      window.removeEventListener('resize', onResize);
      mountRef.current?.removeChild(renderer.domElement);
      scene.clear();
    };
  }, []);

  return (
    <div ref={mountRef} className="relative w-full h-screen bg-black overflow-hidden">
      <div id="radial-buttons" className="pointer-events-none">
        {['❤️', '🗑️', '🎯', '🔄'].map((icon, idx) => (
          <button key={idx} className="radial-button absolute w-9 h-9 rounded-full bg-white border border-gray-300 hidden pointer-events-auto hover:bg-gray-200">
            {icon}
          </button>
        ))}
      </div>
    </div>
  );
};

export default App;
